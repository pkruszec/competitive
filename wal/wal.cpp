//
// Walki robotów (wal)
// Paweł Kruszec
//

#include <iostream>
#include <vector>
#include <stdint.h>
#include <limits.h>
#include <queue>
#include <bitset>
#include <algorithm>

using namespace std;

using P = pair<int, int>;


bool all_done(vector<P> &p, int start_idx)
{
    /*
    vector<bool> done(p.size());

    for (int it = 0; it < p.size(); ++it) {
        int i = (start_idx+it) % p.size();

        if (done[i]) continue;
        for (int j = 0; j < p.size(); ++j) {
            if (done[j]) continue;
            if (i == j) continue;

            bool fst_done = p[i].first < p[j].first;
            bool snd_done = p[j].second < p[i].second;

            if (fst_done && snd_done) {
                done[i] = true;
                done[j] = true;
                break;
            }

            // if (snd_done) {
            //     done[j] = true;
            // }

            // if (fst_done) {
            //     done[i] = true;
            //     break;
            // }
        }
    }

    bool all = true;
    for (int i = 0; i < p.size(); ++i) {
        if (!done[i]) {
            all = false;
            break;
        }
    }

    cout << start_idx << " ::(";
    for (int i = 0; i < p.size(); ++i) {
        cout << p[i].first << "," << p[i].second << "->" << done[i]<< " ";
    }
    cout << start_idx << ") ";
    return all;
*/

    vector<bool> done(p.size());

    for (int it = 0; it < p.size(); ++it) {
        int i = (start_idx+it) % p.size();

        if (done[i]) continue;
        int b = 0;
        int v = INT_MAX;
        for (int j = 0; j < p.size(); ++j) {
            if (done[i]) continue;
            if (i==j) continue;
            int a = abs(p[i].first - p[j].second);
            if (a < v) {
                v = a;
                b = j;
            }
        }

        bool fst_done = p[i].first < p[b].first;
        bool snd_done = p[b].second < p[i].second;
        if (snd_done) {
            done[b] = true;
        }
        if (fst_done) done[i] = true;
    }

    bool all = true;
    for (int i = 0; i < p.size(); ++i) {
        if (!done[i]) {
            all = false;
            break;
        }
    }

    return all;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;

    vector<pair<int, int>> xs(n);
    // vector<bool> done(n);

#ifdef BIGTEST
    if (n == 0) {
        cout << "TAK\n";
        return 0;
    }
#endif

    for (int i = 0; i < n; ++i) {
        int s, z;
        cin >> s >> z;
        #ifdef BIGTEST
        s += 1;
        z += 1;
        #endif

        auto p = pair<int, int>(s, z);
        xs[i] = p;
    }


    P fst_s = {};
    P fst_z = {};
    P snd_s = {};
    P snd_z = {};

    sort(xs.begin(), xs.end(), [](auto a, auto b){
        return a.first > b.first;
    });

    int s = 0;
    int i = 0;
    for (auto p: xs) {
        // if (i < 10) cout << "(" << p.first << "," << p.second << ") ";

        if (s == 0) {
            fst_s = p;
            s++;
        }
        else if (s == 1 && p != fst_s) {
            snd_s = p;
            s++;
        } else break;

        i++;
    }

    sort(xs.begin(), xs.end(), [](auto a, auto b){
        return a.second > b.second;
    });

    s = 0;
    for (auto p: xs) {
        if (p == fst_s || p == snd_s) continue;
        if (s == 0) {
            fst_z = p;
            s++;
        }
        else if (s == 1 && p != fst_z) {
            snd_z = p;
            s++;
        } else break;
    }

    bool s_elim = fst_s.second < snd_s.second;
    bool z_elim = fst_z.first < snd_z.first;

    if (s_elim && z_elim) {
        cout << "TAK\n";
        return 0;
    }

    vector<string> perm = {
        "123456","123465","123546","123564","123645","123654","124356","124365","124536","124563","124635","124653","125346","125364","125436","125463","125634","125643","126345","126354","126435","126453","126534","126543","132456","132465","132546","132564","132645","132654","134256","134265","134526","134562","134625","134652","135246","135264","135426","135462","135624","135642","136245","136254","136425","136452","136524","136542","142356","142365","142536","142563","142635","142653","143256","143265","143526","143562","143625","143652","145236","145263","145326","145362","145623","145632","146235","146253","146325","146352","146523","146532","152346","152364","152436","152463","152634","152643","153246","153264","153426","153462","153624","153642","154236","154263","154326","154362","154623","154632","156234","156243","156324","156342","156423","156432","162345","162354","162435","162453","162534","162543","163245","163254","163425","163452","163524","163542","164235","164253","164325","164352","164523","164532","165234","165243","165324","165342","165423","165432","213456","213465","213546","213564","213645","213654","214356","214365","214536","214563","214635","214653","215346","215364","215436","215463","215634","215643","216345","216354","216435","216453","216534","216543","231456","231465","231546","231564","231645","231654","234156","234165","234516","234561","234615","234651","235146","235164","235416","235461","235614","235641","236145","236154","236415","236451","236514","236541","241356","241365","241536","241563","241635","241653","243156","243165","243516","243561","243615","243651","245136","245163","245316","245361","245613","245631","246135","246153","246315","246351","246513","246531","251346","251364","251436","251463","251634","251643","253146","253164","253416","253461","253614","253641","254136","254163","254316","254361","254613","254631","256134","256143","256314","256341","256413","256431","261345","261354","261435","261453","261534","261543","263145","263154","263415","263451","263514","263541","264135","264153","264315","264351","264513","264531","265134","265143","265314","265341","265413","265431","312456","312465","312546","312564","312645","312654","314256","314265","314526","314562","314625","314652","315246","315264","315426","315462","315624","315642","316245","316254","316425","316452","316524","316542","321456","321465","321546","321564","321645","321654","324156","324165","324516","324561","324615","324651","325146","325164","325416","325461","325614","325641","326145","326154","326415","326451","326514","326541","341256","341265","341526","341562","341625","341652","342156","342165","342516","342561","342615","342651","345126","345162","345216","345261","345612","345621","346125","346152","346215","346251","346512","346521","351246","351264","351426","351462","351624","351642","352146","352164","352416","352461","352614","352641","354126","354162","354216","354261","354612","354621","356124","356142","356214","356241","356412","356421","361245","361254","361425","361452","361524","361542","362145","362154","362415","362451","362514","362541","364125","364152","364215","364251","364512","364521","365124","365142","365214","365241","365412","365421","412356","412365","412536","412563","412635","412653","413256","413265","413526","413562","413625","413652","415236","415263","415326","415362","415623","415632","416235","416253","416325","416352","416523","416532","421356","421365","421536","421563","421635","421653","423156","423165","423516","423561","423615","423651","425136","425163","425316","425361","425613","425631","426135","426153","426315","426351","426513","426531","431256","431265","431526","431562","431625","431652","432156","432165","432516","432561","432615","432651","435126","435162","435216","435261","435612","435621","436125","436152","436215","436251","436512","436521","451236","451263","451326","451362","451623","451632","452136","452163","452316","452361","452613","452631","453126","453162","453216","453261","453612","453621","456123","456132","456213","456231","456312","456321","461235","461253","461325","461352","461523","461532","462135","462153","462315","462351","462513","462531","463125","463152","463215","463251","463512","463521","465123","465132","465213","465231","465312","465321","512346","512364","512436","512463","512634","512643","513246","513264","513426","513462","513624","513642","514236","514263","514326","514362","514623","514632","516234","516243","516324","516342","516423","516432","521346","521364","521436","521463","521634","521643","523146","523164","523416","523461","523614","523641","524136","524163","524316","524361","524613","524631","526134","526143","526314","526341","526413","526431","531246","531264","531426","531462","531624","531642","532146","532164","532416","532461","532614","532641","534126","534162","534216","534261","534612","534621","536124","536142","536214","536241","536412","536421","541236","541263","541326","541362","541623","541632","542136","542163","542316","542361","542613","542631","543126","543162","543216","543261","543612","543621","546123","546132","546213","546231","546312","546321","561234","561243","561324","561342","561423","561432","562134","562143","562314","562341","562413","562431","563124","563142","563214","563241","563412","563421","564123","564132","564213","564231","564312","564321","612345","612354","612435","612453","612534","612543","613245","613254","613425","613452","613524","613542","614235","614253","614325","614352","614523","614532","615234","615243","615324","615342","615423","615432","621345","621354","621435","621453","621534","621543","623145","623154","623415","623451","623514","623541","624135","624153","624315","624351","624513","624531","625134","625143","625314","625341","625413","625431","631245","631254","631425","631452","631524","631542","632145","632154","632415","632451","632514","632541","634125","634152","634215","634251","634512","634521","635124","635142","635214","635241","635412","635421","641235","641253","641325","641352","641523","641532","642135","642153","642315","642351","642513","642531","643125","643152","643215","643251","643512","643521","645123","645132","645213","645231","645312","645321","651234","651243","651324","651342","651423","651432","652134","652143","652314","652341","652413","652431","653124","653142","653214","653241","653412","653421","654123","654132","654213","654231","654312","654321"
    };

    // fst_s, snd_s, fst_z, snd_z
    #define FS 0x01
    #define SS 0x02
    #define FZ 0x04
    #define SZ 0x08

    // first four bits represent 'done'
    // all done if done == 0x0F
    unsigned char done = 0;


    // 1 -> fst_s and fst_z
    // 2 -> snd_s and snd_z
    // 3 -> fst_s and snd_s
    // 4 -> fst_z and snd_z
    // 5 -> fst_s and snd_z
    // 6 -> snd_s and fst_z

    for (auto &s: perm) {
        done = 0;
        for (auto c: s) {
            if (c == '1') {
                if (done & FS || done & FZ) break;
                
                bool e0 = fst_s.first < fst_z.first || fst_s.second < fst_z.second;
                bool e1 = fst_z.first < fst_s.first || fst_z.second < fst_s.second;
                if (e0) done |= FS;
                if (e1) done |= FZ;
            }
            else if (c == '2') {
                if (done & SS || done & SZ) break;
                
                bool e0 = snd_s.first < snd_z.first || snd_s.second < snd_z.second;
                bool e1 = snd_z.first < snd_s.first || snd_z.second < snd_s.second;
                if (e0) done |= SS;
                if (e1) done |= SZ;
            }
            else if (c == '3') {
                if (done & FS || done & SS) break;
                
                bool e0 = fst_s.first < snd_s.first || fst_s.second < snd_s.second;
                bool e1 = snd_s.first < fst_s.first || snd_s.second < fst_s.second;
                if (e0) done |= FS;
                if (e1) done |= SS;
            }
            else if (c == '4') {
                if (done & FZ || done & SZ) break;
                
                bool e0 = fst_z.first < snd_z.first || fst_z.second < snd_z.second;
                bool e1 = snd_z.first < fst_z.first || snd_z.second < fst_z.second;
                if (e0) done |= FZ;
                if (e1) done |= SZ;
            }
            else if (c == '5') {
                if (done & FS || done & SZ) break;
                
                bool e0 = fst_s.first < snd_z.first || fst_s.second < snd_z.second;
                bool e1 = snd_z.first < fst_s.first || snd_z.second < fst_s.second;
                if (e0) done |= FS;
                if (e1) done |= SZ;
            }
            else if (c == '6') {
                if (done & SS || done & FZ) break;
                
                bool e0 = snd_s.first < fst_z.first || snd_s.second < fst_z.second;
                bool e1 = fst_z.first < snd_s.first || fst_z.second < snd_s.second;
                if (e0) done |= SS;
                if (e1) done |= FZ;
            }
        }

        // cout << s << "=" << bitset<8>(done) << " ";

        if (done == 0x0F) {
            cout << "TAK\n";
            return 0;
        }
    }

    cout << "FST_S: " << fst_s.first << "," << fst_s.second << "\n";
    cout << "SND_S: " << snd_s.first << "," << snd_s.second << "\n";
    cout << "FST_Z: " << fst_z.first << "," << fst_z.second << "\n";
    cout << "SND_Z: " << snd_z.first << "," << snd_z.second << "\n";
    cout << "NIE\n";

    // if (elim) {
    //     cout << "TAK\n";
    // } else {
    //     cout << "NIE\n";
    // }

    // vector<P> p {fst_s, fst_z, snd_s, snd_z};

    // TODO: duel fst_s and fst_z, snd_s and snd_z

/*
    bool all = false;
    for (int i = 0; i < p.size(); ++i) {
        if (all_done(p, i)) {
            all = true;
            break;
        }
    } 

    if (all) {
        cout << "TAK\n";
    } else {
        cout << "NIE\n";
    }
*/

/*
    if ((s_elim && !z_elim) || (z_elim && !s_elim)) {
        cout << "FST_S: " << fst_s.first << "," << fst_s.second << "\n";
        cout << "SND_S: " << snd_s.first << "," << snd_s.second << "\n";
        cout << "FST_Z: " << fst_z.first << "," << fst_z.second << "\n";
        cout << "SND_Z: " << snd_z.first << "," << snd_z.second << "\n";
        cout << "NIE\n";
        return 0;
    }
*/

/*
    bool elim = 
        (fst_s.first > fst_z.first && fst_s.second < fst_z.second) ||
        (fst_s.first < fst_z.first && fst_s.second > fst_z.second);

    if (elim) {
        cout << "TAK\n";
    } else {
        cout << "FST_S: " << fst_s.first << "," << fst_s.second << "\n";
        cout << "FST_Z: " << fst_z.first << "," << fst_z.second << "\n";

        // cout << "SND_S: " << snd_s.first << "," << snd_s.second << "\n";
        // cout << "SND_Z: " << snd_z.first << "," << snd_z.second << "\n";
        cout << "NIE\n";
    }
*/    

/*
    for (int i = 0; i < n; ++i) {
        if (done[i]) continue;
        for (int j = 0; j < n; ++j) {
            if (done[j]) continue;
            if (i == j) continue;

            bool fst_done = xs[i].first < xs[j].first;
            bool snd_done = xs[j].second < xs[i].second;

            if (fst_done && snd_done) {
                done[i] = true;
                done[j] = true;
                break;
            }
        }
    }

    bool all = true;
    for (int i = 0; i < n; ++i) {
        // cout << done[i] << " ";
        if (!done[i]) {
            all = false;
            break;
        }
    }

    if (all) {
        cout << "TAK\n";
    } else {
        cout << "NIE\n";
    }
*/

    return 0;
}
